Object subclass: #CuOOra	instanceVariableNames: 'topicos usuarios'	classVariableNames: ''	package: 'Objetos2-TP1-Model'!!CuOOra methodsFor: 'utility' stamp: 'AgustinaGarcia 4/6/2021 13:13'!crearUsuarioConNombre: unNombre email: unEmail yContraseña: unaContraseña	"deberia devolver ^nuevoUsuario ?"	| nuevoUsuario |	(self usuarioConEmail: unEmail yContraseña: unaContraseña)		ifNil: [ ^ nil ].	nuevoUsuario := Usuario		conNombre: unNombre		conEmail: unEmail		yContraseña: unaContraseña.	self agregarUsuario: nuevoUsuario.	^ nuevoUsuario! !!CuOOra methodsFor: 'utility' stamp: 'AgustinaGarcia 4/6/2021 12:56'!usuarioConEmail: unEmail yContraseña: unaContraseña^usuarios detect: [ :each | each email = unEmail & (each contraseña = unaContraseña)]ifNone: [ nil ]! !!CuOOra methodsFor: 'utility' stamp: 'AgustinaGarcia 4/6/2021 08:35'!agregarUsuario: unUsuariousuarios add: unUsuario ! !!CuOOra methodsFor: 'utility' stamp: 'AgustinaGarcia 4/6/2021 09:45'!crearUsuarioConNombre: unNombre yContraseña: unaContraseña"deberia devolver ^nuevoUsuario ?"	| nuevoUsuario |	nuevoUsuario := Usuario		conEmail: unNombre		yContraseña: unaContraseña.	self agregarUsuario: nuevoUsuario.	^nuevoUsuario ! !!CuOOra methodsFor: 'utility' stamp: 's 4/1/2021 10:53'!agregarTopicoConNombre: unNombre yDescripcion: unaDescripcion	"Deberia devolver ^nuevoTopico ? "	| nuevoTopico |	nuevoTopico := Topico		conNombre: unNombre		yDescripcion: unaDescripcion.	topicos add: nuevoTopico.	 	! !!CuOOra methodsFor: 'accessing' stamp: 's 3/31/2021 23:28'!usuarios	^ usuarios! !!CuOOra methodsFor: 'accessing' stamp: 's 3/31/2021 23:28'!topicos	^ topicos! !!CuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/31/2021 22:50'!initialize	usuarios := OrderedCollection new.	topicos := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'soleInstance'!!CuOOra class methodsFor: 'instance creation' stamp: 'AgustinaGarcia 4/6/2021 06:59'!soleInstance ^soleInstance ifNil: [ soleInstance := self new ]! !!CuOOra class methodsFor: 'instance creation' stamp: 'AgustinaGarcia 4/6/2021 06:59'!clearSoleInstance soleInstance := nil! !Object subclass: #Publicacion	instanceVariableNames: 'texto fechaHoraCreacion cantidadLikes cantidadDislikes votos'	classVariableNames: ''	package: 'Objetos2-TP1-Model'!!Publicacion methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:09'!fechaHoraCreacion: unaFechafechaHoraCreacion := unaFecha! !!Publicacion methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:25'!fechaHoraCreacion	^fechaHoraCreacion! !!Publicacion methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:07'!texto:unStringtexto := unString ! !!Publicacion methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:07'!texto ^texto! !!Publicacion methodsFor: 'accessing' stamp: 's 3/31/2021 23:28'!votos	^ votos! !!Publicacion methodsFor: 'initialization' stamp: 'Anonymous 3/31/2021 22:51'!initialize 		fechaHoraCreacion := DateAndTime now.	cantidadLikes := 0.	cantidadDislikes := 0.	votos := OrderedCollection new.! !!Publicacion methodsFor: 'operations' stamp: 's 4/1/2021 11:30'!calcularPuntaje	"^ (integer) cantidadLikes – cantidadDislikes ---> esto chequear si vale la pena tener dos variables	se puede recorrer la coleccion de votos y contar positivos y negativos	Tiene que haber una forma mas simple de hacer esto."	| likes dislikes |	likes := 0.	dislikes := 0.	votos		select: [ :unVoto | 			unVoto estado				ifTrue: [ likes := likes + 1 ]				ifFalse: [ dislikes := dislikes + 1 ] ].	^ likes - dislikes! !!Publicacion methodsFor: 'operations' stamp: 's 3/31/2021 23:36'!agregarVoto: unVoto	votos add: unVoto! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Publicacion class	instanceVariableNames: ''!!Publicacion class methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 06:58'!texto: aString^self newtexto: aString;yourself ! !Publicacion subclass: #Pregunta	instanceVariableNames: 'titulo usuario respuestas topicos'	classVariableNames: ''	package: 'Objetos2-TP1-Model'!!Pregunta methodsFor: 'operations' stamp: 's 3/31/2021 23:34'!agregarRespuesta: unaRespuesta	respuestas add: unaRespuesta! !!Pregunta methodsFor: 'operations' stamp: 's 4/1/2021 11:48'!eliminarPregunta	"mando a topicos borrarPregunta (todos de la coleccion), borro los topicos, mando a las respuestas para que los usuarios borrenRespuestas, borro las respuestas, borro la pregunta de la coleccion del usuario,borro la instancia? chequear esto"	! !!Pregunta methodsFor: 'operations' stamp: 's 3/31/2021 23:34'!agregarTopico: unTopico	topicos add: unTopico! !!Pregunta methodsFor: 'initialization' stamp: 's 4/1/2021 11:13'!initialize		super initialize.	respuestas := OrderedCollection new.	topicos := OrderedCollection new! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:14'!topicos^topicos! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:14'!usuario: unUsuariousuario:=unUsuario! !!Pregunta methodsFor: 'accessing' stamp: 's 4/1/2021 11:43'!respuestas"este es el getter normal. deberia haber otro metodo(creo) que devuelve la coleccion ordenada (por puntaje). el metodo deberia estar en pregunta. CREO"	^ respuestas! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:14'!usuario^usuario	! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:13'!titulo: unTitulotitulo:=unTitulo! !!Pregunta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:14'!titulo^titulo! !Publicacion subclass: #Respuesta	instanceVariableNames: 'usuario'	classVariableNames: ''	package: 'Objetos2-TP1-Model'!!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:08'!usuario: unUsuario	usuario := unUsuario! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:08'!texto	^texto! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:08'!usuario^usuario! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:08'!texto: unTextotexto:= unTexto! !!Respuesta methodsFor: 'initialization' stamp: 's 4/1/2021 11:15'!initialize	super initialize.! !!Respuesta methodsFor: 'operations' stamp: 's 4/1/2021 11:44'!borrarRespuesta"aca seria mandar mensaje a usuario para borrarRespuesta (con self?)"	! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion preguntas'	classVariableNames: ''	package: 'Objetos2-TP1-Model'!!Topico methodsFor: 'initialization' stamp: 'Anonymous 3/31/2021 23:04'!initialize	preguntas := OrderedCollection new! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:03'!nombre^nombre! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:05'!descripcion^descripcion! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:03'!nombre: unNombrenombre := unNombre! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:03'!descripcion: unaDescripcion	descripcion := unaDescripcion! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:12'!preguntas^preguntas! !!Topico methodsFor: 'operations' stamp: 's 4/1/2021 11:21'!borrarPregunta: unaPreguntapreguntas remove: unaPregunta	! !!Topico methodsFor: 'operations' stamp: 's 3/31/2021 23:39'!agregarPregunta: unaPreguntapreguntas add: unaPregunta! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'as yet unclassified' stamp: 'AgustinaGarcia 4/6/2021 06:57'!conNombre: unNombre yDescripcion: unaDescripcion	^ self new	nombre: unNombre;	texto: unaDescripcion;	yourself! !Object subclass: #Usuario	instanceVariableNames: 'nombre email contraseña fechaHoraCreacion usuariosSeguidos topicosDeInteres votos preguntas respuestas'	classVariableNames: ''	package: 'Objetos2-TP1-Model'!!Usuario methodsFor: 'initialization' stamp: 'Anonymous 3/31/2021 22:56'!initialize	usuariosSeguidos := OrderedCollection new.	topicosDeInteres := OrderedCollection new.	votos := OrderedCollection new.	preguntas := OrderedCollection new.	respuestas := OrderedCollection new! !!Usuario methodsFor: 'operations' stamp: 's 4/1/2021 11:47'!obtenerPreguntasRelevantes	"^ (colección de Preguntas)(A la colección de Usuario topicosDeInteres le pido a cada topico su colección de preguntas) + (a la colección de Usuario usuariosSeguidos le pido a cada usuario su colección de preguntas)	Se hace con flatCollect? dudoso. Seria juntas las dos colecciones y devolver esa nueva coleccion"	! !!Usuario methodsFor: 'operations' stamp: 's 4/1/2021 11:16'!agregarRespuestaConTexto: unTexto"devuelve ^unaRepuesta ?"	| unaRespuesta |	unaRespuesta := Respuesta new.	unaRespuesta texto: unTexto.	respuestas add: unaRespuesta		! !!Usuario methodsFor: 'operations' stamp: 's 4/1/2021 11:47'!calcularPuntajeUsuario	"probar "	^ preguntas size * 20 + (respuestas size * 50)		+			(preguntas sumNumbers: [ :unaPregunta | unaPregunta calcularPuntaje ])		+			(respuestas				sumNumbers: [ :unaRespuesta | unaRespuesta calcularPuntaje ])! !!Usuario methodsFor: 'operations' stamp: 'AgustinaGarcia 4/6/2021 07:10'!agregarPregunta: unPostpreguntas add:unPost! !!Usuario methodsFor: 'operations' stamp: 's 4/1/2021 11:20'!eliminarPregunta: unaPreguntapreguntas remove: unaPregunta	! !!Usuario methodsFor: 'operations' stamp: 'AgustinaGarcia 4/6/2021 06:57'!agregarPreguntaConTitulo: unTitulo yDescripcion: unaDescripcion	"devuelve ^unaPregunta ?	ESTO: tiene que si o si tener un topico o mas. no me queda claro como hacerlo.. quizas pensarlo como lo ejecuta la interfaz"	| unaPregunta |	unaPregunta := Pregunta new.	unaPregunta titulo: unTitulo.	unaPregunta texto: unaDescripcion.	preguntas add: unaPregunta! !!Usuario methodsFor: 'operations' stamp: 's 4/1/2021 11:20'!eliminarRespuesta: unaRespuesta	respuestas remove: unaRespuesta	! !!Usuario methodsFor: 'operations' stamp: 's 3/31/2021 23:39'!agregarTopicoDeInteres: unTopicotopicosDeInteres add: unTopico! !!Usuario methodsFor: 'operations' stamp: 'AgustinaGarcia 4/6/2021 07:16'!seguirUsuario: usuarioASeguir	(usuariosSeguidos includes: usuarioASeguir ) 	ifTrue: [^self].	usuariosSeguidos add: usuarioASeguir.! !!Usuario methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 09:29'!nombre: algunNombrenombre:= algunNombre ! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:09'!preguntas^preguntas! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:01'!contraseña^contraseña! !!Usuario methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:14'!email: unString email:=unString ! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:13'!votos^votos! !!Usuario methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 09:29'!nombre^nombre! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:10'!respuestas^respuestas! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:09'!usuarioSeguidos^usuariosSeguidos! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:09'!topicosDeInteres^topicosDeInteres! !!Usuario methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:13'!email	^email! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:02'!fechaHoraCreacion	^fechaHoraCreacion! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:01'!contraseña: unaContraseña	contraseña := unaContraseña! !!Usuario methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:02'!fechaHoraCreacion: unaFecha	fechaHoraCreacion:= unaFecha! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'as yet unclassified' stamp: 'AgustinaGarcia 4/6/2021 09:52'!conNombre: unNombre conEmail: unEmail yContraseña: unaContraseña^ self new 	nombre: unNombre;	email: unEmail;	contraseña: unaContraseña;	fechaHoraCreacion: DateAndTime now;	yourself	! !!Usuario class methodsFor: 'as yet unclassified' stamp: 'AgustinaGarcia 4/6/2021 07:52'!conEmail: unNombre yContraseña: unaContraseña^ self new 	email: unNombre;	contraseña: unaContraseña;	fechaHoraCreacion: DateAndTime now;	yourself	! !Object subclass: #Voto	instanceVariableNames: 'creador publicacion estado fechaHoraCreacion'	classVariableNames: ''	package: 'Objetos2-TP1-Model'!!Voto methodsFor: 'initialization' stamp: 'Anonymous 3/31/2021 23:04'!initialize" ???? ojo con esto chequear"	publicacion := nil.	estado := nil! !!Voto methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:26'!fechaHoraCreacion: unaFechafechaHoraCreacion := unaFecha	! !!Voto methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:06'!creador: unCreador	creador := unCreador! !!Voto methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:07'!publicacion	^publicacion! !!Voto methodsFor: 'accessing' stamp: 's 3/31/2021 23:26'!fechaHoraCreacion^fechaHoraCreacion! !!Voto methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:07'!publicacion: unaPublicacion	publicacion:= unaPublicacion! !!Voto methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:06'!creador^creador! !!Voto methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 23:07'!estado^estado! !!Voto methodsFor: 'operations' stamp: 's 4/1/2021 11:05'!darDislike	estado := false! !!Voto methodsFor: 'operations' stamp: 's 4/1/2021 11:04'!darLike	estado := true.! !WAComponent subclass: #HomeCuOOraComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'Objetos2-TP1-Seaside'!!HomeCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 09:39'!renderContentOn: aCanvas	aCanvas heading: 'CuOOra' , self session user name.	self renderPostsOn: aCanvas.		aCanvas horizontalRule.	self renderLogoutButtonOn: aCanvas! !!HomeCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 08:44'!renderPostsOn: aCanvas	aCanvas heading		level: 2;		with: 'Posts'.	aCanvas		unorderedList: [ self session user postsInNetwork				do: [ :each | aCanvas listItem: each text ] ].	aCanvas anchor		callback: [ self createNewPost ];		with: [ aCanvas button: 'New post' ]! !!HomeCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 08:45'!renderLogoutButtonOn: aCanvas	aCanvas		paragraph: [ aCanvas anchor				callback: [ self answer ];				with: [ aCanvas button with: 'Logout' ] ]! !WAComponent subclass: #OtorgarAccesoComponent	instanceVariableNames: 'email contraseña'	classVariableNames: ''	package: 'Objetos2-TP1-Seaside'!!OtorgarAccesoComponent methodsFor: 'private' stamp: 'AgustinaGarcia 4/6/2021 12:36'!proceedWith: aUser" El #proceedWith: se usa cuando verificaste que el usuario y contraseña. Le asigna a la sesión el usuario y llama al HomeComponent. Es el caso exitosoo"self session user: aUser .self call: HomeComponent new ! !!OtorgarAccesoComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 08:08'!renderButtonsOn: aCanvas	self subclassResponsibility! !!OtorgarAccesoComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 08:47'!renderContentOn: aCanvas	aCanvas heading 	level: 1;	with: 'CuOOra'.	aCanvas		form: [ self renderInputElementsOn: aCanvas.			self renderButtonsOn: aCanvas ]! !!OtorgarAccesoComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 09:40'!renderInputElementsOn: aCanvas	aCanvas label: 'Email'.	aCanvas paragraph: [ aCanvas textInput on: #email of: self ].	aCanvas label: 'Contraseña:'.	aCanvas paragraph: [ aCanvas passwordInput on: #contraseña of: self ]! !!OtorgarAccesoComponent methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:59'!contraseña ^contraseña ! !!OtorgarAccesoComponent methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:59'!contraseña: unaContraseña contraseña := unaContraseña ! !!OtorgarAccesoComponent methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:59'!model^CuOOra soleInstance ! !!OtorgarAccesoComponent methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:58'!email^email! !!OtorgarAccesoComponent methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 07:58'!email: unEmail email := unEmail ! !OtorgarAccesoComponent subclass: #LoginCuOOraComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'Objetos2-TP1-Seaside'!!LoginCuOOraComponent methodsFor: 'callbacks' stamp: 'AgustinaGarcia 4/6/2021 08:26'!registrarNuevoUsuario	self call: RegistrarCuOOraComponent new! !!LoginCuOOraComponent methodsFor: 'callbacks' stamp: 'AgustinaGarcia 4/6/2021 08:29'!login "Le pedimos al model (la sesión unica de CuOOra) que registre un nuevo usuario. "(self model usuarioConEmail: email yContraseña: contraseña ) ifNotNil: [ :user | self proceedWith: user  ].email:=nil.contraseña :=nil.! !!LoginCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 08:23'!renderButtonsOn: aCanvas	self renderSignInButtonOn: aCanvas.	aCanvas horizontalRule.	aCanvas paragraph: 'No tenés una cuenta?'.	self renderSignUpButtonOn: aCanvas! !!LoginCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 08:25'!renderSignUpButtonOn: aCanvas	aCanvas submitButton		callback: [ self registrarNuevoUsuario ];		with: 'Registrate, es gratis!!'! !!LoginCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 08:27'!renderSignInButtonOn: aCanvas	aCanvas submitButton		callback: [ self login ];		with: 'Iniciar sesión'! !OtorgarAccesoComponent subclass: #RegistrarCuOOraComponent	instanceVariableNames: 'nombre'	classVariableNames: ''	package: 'Objetos2-TP1-Seaside'!!RegistrarCuOOraComponent methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 09:33'!nombre	^ nombre! !!RegistrarCuOOraComponent methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 09:33'!nombre: unNombrenombre:= unNombre ! !!RegistrarCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 11:58'!renderButtonsOn: aCanvas	self renderSignUpButtonOn: aCanvas! !!RegistrarCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 09:33'!renderSignUpButtonOn: aCanvas	aCanvas submitButton		callback: [ self registrarYLogin ];		with: 'Registrate'.	aCanvas button		callback: [ self answer ];		with: 'Volver'! !!RegistrarCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 12:48'!registrarYLogin	| theUser |	theUser := self model		crearUsuarioConNombre: nombre		email: email		yContraseña: contraseña.		theUser ifNotNil: [ self proceedWith: theUser ]! !!RegistrarCuOOraComponent methodsFor: 'rendering' stamp: 'AgustinaGarcia 4/6/2021 09:30'!renderInputElementsOn: aCanvas	aCanvas label: 'Nombre'.	aCanvas paragraph: [ aCanvas textInput on: #nombre of: self ].	super renderInputElementsOn: aCanvas! !WASession subclass: #SessionWithUserCuOOra	instanceVariableNames: 'user'	classVariableNames: ''	package: 'Objetos2-TP1-Seaside'!!SessionWithUserCuOOra methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 09:46'!user^user! !!SessionWithUserCuOOra methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 09:46'!user: unUsuario user:= unUsuario ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SessionWithUserCuOOra class	instanceVariableNames: 'user'!!SessionWithUserCuOOra class methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 12:18'!user	^ user! !!SessionWithUserCuOOra class methodsFor: 'accessing' stamp: 'AgustinaGarcia 4/6/2021 12:18'!user: anObject	user := anObject! !